name: Pull Request CI

# ============================================================================
# Pull Request Continuous Integration Workflow
# ============================================================================
# This workflow runs on every pull request to the master branch and performs:
# 1. Code linting (ESLint)
# 2. Unit & Integration tests with coverage (parallel with E2E)
# 3. E2E tests with Playwright (parallel with Unit tests)
# 4. Status comment to PR with results summary
#
# The workflow uses:
# - Node.js 22 (from .nvmrc)
# - Chromium browser for E2E tests (as configured in playwright.config.ts)
# - Integration environment for E2E tests with Supabase secrets
# - Coverage reports for both unit and E2E tests
# ============================================================================

on:
  pull_request:
    branches: [master]

env:
  NODE_VERSION: 22

jobs:
  # ========================================
  # JOB 1: Linting
  # ========================================
  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # ========================================
  # JOB 2: Unit & Integration Tests
  # ========================================
  unit-test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run unit and integration tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-coverage-report
          path: coverage/
          retention-days: 7

  # ========================================
  # JOB 3: E2E Tests
  # ========================================
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: integration

    env:
      PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      E2E_TEST_USER_EMAIL: ${{ secrets.E2E_TEST_USER_EMAIL }}
      E2E_TEST_USER_PASSWORD: ${{ secrets.E2E_TEST_USER_PASSWORD }}
      BASE_URL: http://localhost:4322

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload Playwright Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: playwright-results/
          retention-days: 7

  # ========================================
  # JOB 4: Status Comment
  # ========================================
  status-comment:
    name: Post PR Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always()
    permissions:
      pull-requests: write

    steps:
      - name: Determine overall status
        id: status
        run: |
          LINT_STATUS="${{ needs.lint.result }}"
          UNIT_STATUS="${{ needs.unit-test.result }}"
          E2E_STATUS="${{ needs.e2e-test.result }}"

          echo "lint_status=$LINT_STATUS" >> $GITHUB_OUTPUT
          echo "unit_status=$UNIT_STATUS" >> $GITHUB_OUTPUT
          echo "e2e_status=$E2E_STATUS" >> $GITHUB_OUTPUT

          if [[ "$LINT_STATUS" == "success" && "$UNIT_STATUS" == "success" && "$E2E_STATUS" == "success" ]]; then
            echo "overall_status=✅ All checks passed" >> $GITHUB_OUTPUT
            echo "overall_emoji=✅" >> $GITHUB_OUTPUT
          else
            echo "overall_status=❌ Some checks failed" >> $GITHUB_OUTPUT
            echo "overall_emoji=❌" >> $GITHUB_OUTPUT
          fi

      - name: Create status badge
        id: badge
        run: |
          LINT_BADGE=$([ "${{ needs.lint.result }}" == "success" ] && echo "✅" || echo "❌")
          UNIT_BADGE=$([ "${{ needs.unit-test.result }}" == "success" ] && echo "✅" || echo "❌")
          E2E_BADGE=$([ "${{ needs.e2e-test.result }}" == "success" ] && echo "✅" || echo "❌")

          echo "lint_badge=$LINT_BADGE" >> $GITHUB_OUTPUT
          echo "unit_badge=$UNIT_BADGE" >> $GITHUB_OUTPUT
          echo "e2e_badge=$E2E_BADGE" >> $GITHUB_OUTPUT

      - name: Post comment to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-ci-status
          message: |
            ## ${{ steps.status.outputs.overall_emoji }} CI Pipeline Status

            | Job | Status | Result |
            |-----|--------|--------|
            | 🔍 Linting | ${{ steps.badge.outputs.lint_badge }} | `${{ needs.lint.result }}` |
            | 🧪 Unit & Integration Tests | ${{ steps.badge.outputs.unit_badge }} | `${{ needs.unit-test.result }}` |
            | 🎭 E2E Tests | ${{ steps.badge.outputs.e2e_badge }} | `${{ needs.e2e-test.result }}` |

            **Overall Status:** ${{ steps.status.outputs.overall_status }}

            ---
            <details>
            <summary>📊 Test Artifacts</summary>

            - [Unit Test Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Playwright HTML Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Playwright Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            </details>

            *Last updated: ${{ github.event.pull_request.updated_at }}*
            *Commit: ${{ github.event.pull_request.head.sha }}*

